{
  "collection": {
    "_": {
      "postman_id": "5cea0ced-c614-41b6-84b2-10330b86eaa0"
    },
    "item": [
      {
        "id": "cddf547a-8f22-48b6-b829-0a4fb049109e",
        "name": "N1",
        "item": [
          {
            "id": "b2d14012-1960-4490-a877-72a030724014",
            "name": "/Service",
            "request": {
              "description": {
                "content": "This operation creates a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"state\":\"active\",\"serviceSpecification\":{\"id\":\"1212\",\"@referredType\":\"ServiceSpecification\"}}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c01ec730-3f29-4d7a-a7d2-444c6f200c8e",
                  "type": "text/javascript",
                  "exec": [
                    "var jsonData = pm.response.json();",
                    "",
                    "if (Array.isArray(jsonData)) { ",
                    "  ",
                    "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                    "  ",
                    "",
                    "}",
                    "",
                    "pm.test(\"Successful POST request\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
                    "});",
                    "",
                    "var instance = pm.response.json();",
                    "var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "",
                    "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "",
                    "",
                    "",
                    "pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "",
                    "pm.globals.set('SUPPORTINGSERVICESE01', instance['supportingService']);",
                    "pm.globals.set('FEATURESE01', instance['feature']);",
                    "pm.globals.set('SERVICERELATIONSHIPSE01', instance['serviceRelationship']);",
                    "pm.globals.set('STATESE01', instance['state']);",
                    "pm.globals.set('RELATEDENTITYSE01', instance['relatedEntity']);",
                    "pm.globals.set('STARTMODESE01', instance['startMode']);",
                    "pm.globals.set('STARTDATESE01', instance['startDate']);",
                    "pm.globals.set('ISBUNDLESE01', instance['isBundle']);",
                    "pm.globals.set('SERVICEORDERITEMSE01', instance['serviceOrderItem']);",
                    "pm.globals.set('PLACESE01', instance['place']);",
                    "pm.globals.set('SERVICECHARACTERISTICSE01', instance['serviceCharacteristic']);",
                    "pm.globals.set('NOTESE01', instance['note']);",
                    "pm.globals.set('SERVICETYPESE01', instance['serviceType']);",
                    "pm.globals.set('SUPPORTINGRESOURCESE01', instance['supportingResource']);",
                    "pm.globals.set('HASSTARTEDSE01', instance['hasStarted']);",
                    "pm.globals.set('SERVICESPECIFICATIONSE01', instance['serviceSpecification']);",
                    "pm.globals.set('NAMESE01', instance['name']);",
                    "pm.globals.set('DESCRIPTIONSE01', instance['description']);",
                    "pm.globals.set('SERVICEDATESE01', instance['serviceDate']);",
                    "pm.globals.set('ENDDATESE01', instance['endDate']);",
                    "pm.globals.set('HREFSE01', instance['href']);",
                    "pm.globals.set('IDSE01', instance['id']);",
                    "pm.globals.set('RELATEDPARTYSE01', instance['relatedParty']);",
                    "pm.globals.set('ISSERVICEENABLEDSE01', instance['isServiceEnabled']);",
                    "pm.globals.set('ISSTATEFULSE01', instance['isStateful']);",
                    "pm.globals.set('CATEGORYSE01', instance['category']);",
                    "",
                    "pm.test('Body includes value held on state', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['state']);",
                    "});",
                    "",
                    "pm.test('Body includes value held on serviceDate', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "});",
                    "pm.test('Body includes value held on href', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['href']);",
                    "});",
                    "pm.test('Body includes value held on id', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['id']);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "4c1e4798-7e62-40f7-991c-83fac2df82e4"
                }
              }
            ]
          },
          {
            "id": "b582a509-b9e2-4636-b301-de4649e580fc",
            "name": "/Service",
            "request": {
              "description": {
                "content": "This operation creates another Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"state\": \"active\",\n  \"serviceSpecification\": {\n    \"id\": \"1212\",\n    \"@referredType\": \"ServiceSpecification\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b9b90099-84cb-43ec-9813-161c642d8656",
                  "type": "text/javascript",
                  "exec": [
                    "var jsonData = pm.response.json();",
                    "",
                    "if (Array.isArray(jsonData)) {",
                    "",
                    "  pm.test('Array not expected as response', function () { pm.expect.fail() });",
                    "",
                    "",
                    "}",
                    "",
                    "pm.test(\"Successful POST request\", function () {",
                    "  pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
                    "});",
                    "",
                    "if (pm.response.code == 202) {",
                    "  setTimeout(function () { }, [pm.variables.get(\"delay\")]);",
                    "  postman.setNextRequest('get202')",
                    "}",
                    "else {",
                    "  var instance = pm.response.json();",
                    "  var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "",
                    "  pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "",
                    "",
                    "",
                    "  pm.test('Response has serviceDate attribute', function () { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "  pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "  pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "",
                    "  pm.globals.set('SUPPORTINGSERVICESE02', instance['supportingService']);",
                    "  pm.globals.set('FEATURESE02', instance['feature']);",
                    "  pm.globals.set('SERVICERELATIONSHIPSE02', instance['serviceRelationship']);",
                    "  pm.globals.set('STATESE02', instance['state']);",
                    "  pm.globals.set('RELATEDENTITYSE02', instance['relatedEntity']);",
                    "  pm.globals.set('STARTMODESE02', instance['startMode']);",
                    "  pm.globals.set('STARTDATESE02', instance['startDate']);",
                    "  pm.globals.set('ISBUNDLESE02', instance['isBundle']);",
                    "  pm.globals.set('SERVICEORDERITEMSE02', instance['serviceOrderItem']);",
                    "  pm.globals.set('PLACESE02', instance['place']);",
                    "  pm.globals.set('SERVICECHARACTERISTICSE02', instance['serviceCharacteristic']);",
                    "  pm.globals.set('NOTESE02', instance['note']);",
                    "  pm.globals.set('SERVICETYPESE02', instance['serviceType']);",
                    "  pm.globals.set('SUPPORTINGRESOURCESE02', instance['supportingResource']);",
                    "  pm.globals.set('HASSTARTEDSE02', instance['hasStarted']);",
                    "  pm.globals.set('SERVICESPECIFICATIONSE02', instance['serviceSpecification']);",
                    "  pm.globals.set('NAMESE02', instance['name']);",
                    "  pm.globals.set('DESCRIPTIONSE02', instance['description']);",
                    "  pm.globals.set('SERVICEDATESE02', instance['serviceDate']);",
                    "  pm.globals.set('ENDDATESE02', instance['endDate']);",
                    "  pm.globals.set('HREFSE02', instance['href']);",
                    "  pm.globals.set('IDSE02', instance['id']);",
                    "  pm.globals.set('RELATEDPARTYSE02', instance['relatedParty']);",
                    "  pm.globals.set('ISSERVICEENABLEDSE02', instance['isServiceEnabled']);",
                    "  pm.globals.set('ISSTATEFULSE02', instance['isStateful']);",
                    "  pm.globals.set('CATEGORYSE02', instance['category']);",
                    "",
                    "  pm.test('Body includes value held on state', function () {",
                    "    pm.expect(pm.response.text()).to.include(instance['state']);",
                    "  });",
                    "  pm.test('Body includes value held on serviceDate', function () {",
                    "    pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "  });",
                    "  pm.test('Body includes value held on href', function () {",
                    "    pm.expect(pm.response.text()).to.include(instance['href']);",
                    "  });",
                    "  pm.test('Body includes value held on id', function () {",
                    "    pm.expect(pm.response.text()).to.include(instance['id']);",
                    "  });",
                    "}"
                  ],
                  "_lastExecutionId": "72d245fd-5d2b-469f-af39-ba215e086be7"
                }
              }
            ]
          },
          {
            "id": "302dfa15-da9d-4cd9-a0eb-7aeda29748bf",
            "name": "/Service/{{IDSE01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created Service",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDSE01}}"
                ],
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "374acb5c-b216-471f-b3b2-65f21a7dd3aa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('IDSE02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('IDSE02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "073984bc-da42-4095-9a2e-4211fa69153f"
                }
              }
            ]
          },
          {
            "id": "c7d28bb1-e54e-4e51-8eef-fcf7a5e871d5",
            "name": "/Service/{{IDSE02}}",
            "request": {
              "description": {
                "content": "This operation search for the other one of the created Service",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDSE02}}"
                ],
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "508ae278-b2ba-481b-a1dc-e9ad66c6226f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('IDSE01 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('IDSE01 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "f8064f88-8b33-49e1-a2ea-90ff970de87c"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "5d19a2f9-27df-4a92-a080-5d024b9d12ff",
        "name": "N2",
        "item": [
          {
            "id": "5ec6844e-5bbb-4903-83a5-b2ffcd5592ea",
            "name": "/Service?fields=state",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "state"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6c8581df-d2fe-48b3-9d21-db7baf6bcc2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b2b72ada-6522-43e2-918c-bd712db796e2"
                }
              }
            ]
          },
          {
            "id": "b4327ecf-7d6e-4758-9bae-e4d46c6a09f6",
            "name": "/Service?state={{STATESE01}}",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "state",
                    "value": "{{STATESE01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "442e894f-cd7a-4e82-8150-ede594d81eb0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('IDSE02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('IDSE02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "2998922d-9797-445c-90d8-546aa697793c"
                }
              }
            ]
          },
          {
            "id": "10b59b93-2581-4971-ab5f-a7ca1a7aa790",
            "name": "/Service?state={{STATESE02}}",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "state",
                    "value": "{{STATESE02}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b18ebaf0-41d4-4747-8c99-53118a955a38",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('IDSE01 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('IDSE01 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "b5581ce4-defe-461c-b2f3-ca2c970e9c8b"
                }
              }
            ]
          },
          {
            "id": "610e02cc-d163-4b7e-8a75-6e4ce3c9920d",
            "name": "/Service?fields=serviceSpecification",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "serviceSpecification"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "86b4e82d-c1f8-484f-8d39-3c70b56e4634",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0b37eadf-86cc-4298-9a94-abc4bc924403"
                }
              }
            ]
          },
          {
            "id": "b519d919-84ba-458d-9680-fec3a8b6c467",
            "name": "/Service?fields=serviceDate",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "serviceDate"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "50e64586-e819-41e2-a5ee-eaded948ddf3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34972e9d-87c9-480e-a65f-37d4e452b6d5"
                }
              }
            ]
          },
          {
            "id": "2a7c45ca-204c-4a2f-8191-c08bdffa09b6",
            "name": "/Service?serviceDate={{SERVICEDATESE01}}",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "serviceDate",
                    "value": "\"{{SERVICEDATESE01}}\""
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0d288c9d-b208-470d-a4fa-a1ce0d14dd12",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('IDSE02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('IDSE02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "e822858e-311f-4774-a84f-cf3658a4a7cc"
                }
              }
            ]
          },
          {
            "id": "2f23d750-b905-4bed-ae15-ee938a228203",
            "name": "/Service?serviceDate={{SERVICEDATESE02}}",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "serviceDate",
                    "value": "\"{{SERVICEDATESE02}}\""
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "185341eb-5022-4fe5-8f49-7fe05ed68abb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('IDSE01 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceSpecification', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceSpecification']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('IDSE01 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "9f908d46-7255-4b06-9b2d-941b15e295b6"
                }
              }
            ]
          },
          {
            "id": "9f4f8db5-9446-4b13-9165-383f37b59340",
            "name": "/Service?fields=href",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "href"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c3b892e3-031d-40cc-bb94-c0665cbb6ed6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a61b9d26-5551-423c-9419-71024fae36a5"
                }
              }
            ]
          },
          {
            "id": "a232a52c-d1f9-4d06-b78b-cc02fc7117e3",
            "name": "/Service?href={{HREFSE01}}",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "href",
                    "value": "{{HREFSE01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "03b7edd4-4211-4d09-8a83-7282d6d22552",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('IDSE02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('IDSE02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "c2b0bb54-a2a7-41aa-88d7-13712cce47bf"
                }
              }
            ]
          },
          {
            "id": "a07fdb4b-d908-4d2b-85de-511ca7bc6358",
            "name": "/Service?href={{HREFSE02}}",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "href",
                    "value": "{{HREFSE02}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cc7ade6e-cafa-4baa-8b09-602f1ae92979",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('IDSE01 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('IDSE01 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "69b8618a-2959-4c67-b533-8dc34afc821b"
                }
              }
            ]
          },
          {
            "id": "0f032425-0ae1-4aba-ae0d-582ee4a82ccd",
            "name": "/Service?fields=id",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "id"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ca64bbfe-040b-47f9-8850-86146b297bb5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b99a6ab9-217c-4898-aca0-2f20264b9c35"
                }
              }
            ]
          },
          {
            "id": "afa0052a-777a-431a-92ba-c7776989d77e",
            "name": "/Service?id={{IDSE01}}",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{IDSE01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "59839aa1-11e6-4988-8396-0164eba0086a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('IDSE02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceSpecification', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceSpecification']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('IDSE02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "f9f1ad72-1752-4067-ac8e-746bd40fe222"
                }
              }
            ]
          },
          {
            "id": "91626c9f-c4ee-4523-9f1f-98d35b5d0e46",
            "name": "/Service?id={{IDSE02}}",
            "request": {
              "description": {
                "content": "This operation filter a Service",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{IDSE02}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f254df85-77f9-4771-837d-5aa1f7835bf0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('IDSE01 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on state', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['state']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceSpecification', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceSpecification']);",
                    "        });",
                    "        pm.test('Body includes value held on serviceDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                    "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                    "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                    "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                    "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                    "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                    "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                    "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                    "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                    "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                    "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                    "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                    "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                    "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                    "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                    "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                    "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                    "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                    "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                    "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                    "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                    "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                    "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                    "            pm.test('IDSE01 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "891d8d27-497a-48f8-bd76-5e11f10a5955"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "35b9ceed-5962-480d-b235-d01a7b888e15",
        "name": "E1",
        "item": [
          {
            "id": "e6c830f0-829f-40e2-bf48-a307c499e596",
            "name": "/Service/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created Service",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "141cf386-5831-41a9-84a0-648020b34b03"
                ],
                "host": [
                  "{{Service_Inventory}}service"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer 1321321"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5ac44b22-8da1-4821-9d54-6913eb142427",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "da052510-8444-43d0-8c7b-f34a49a30edb"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      }
    ],
    "event": [],
    "protocolProfileBehavior": {},
    "variable": [],
    "info": {
      "_postman_id": "5cea0ced-c614-41b6-84b2-10330b86eaa0",
      "name": "CTK-Service_Inventory-4.0.0",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2020-07-07T14:17:10.805Z",
      "postman_exported_using": "Postman/7.27.1"
    },
    "id": "da32588a-3916-4d78-a546-7623e391f650",
    "name": "TMForumv4",
    "values": [
      {
        "type": "any",
        "value": "{{Service_Inventory}}/tmf-api/serviceInventory/v4",
        "key": "ServiceInventoryAPI"
      },
      {
        "type": "any",
        "value": "https://api-service-ordering-v4-0-0.mybluemix.net",
        "key": "Service_Ordering"
      },
      {
        "type": "any",
        "value": "https://api-service-qualification-management-v4-0-0.mybluemix.net",
        "key": "Service_Qualification"
      },
      {
        "type": "any",
        "value": "https://api-service-test-management-v4-0-0.mybluemix.net",
        "key": "Service_Test"
      },
      {
        "type": "any",
        "value": "https://api-usage-consumption-v4-0-0.mybluemix.net",
        "key": "Usage_Consumption"
      },
      {
        "type": "any",
        "value": "https://api-service-activation-and-configuration-v4-0-0.mybluemix.net",
        "key": "Service_Activation"
      },
      {
        "type": "any",
        "value": "https://api-service-catalog-management-v4-0-0.mybluemix.net",
        "key": "Service_Catalog"
      },
      {
        "type": "any",
        "value": "https://api-service-problem-management-v4-0-0.mybluemix.net",
        "key": "Service_Problem"
      },
      {
        "type": "any",
        "value": "http://localhost:8080/",
        "key": "Service_Inventory"
      },
      {
        "type": "any",
        "value": "{{Service_Catalog}}/tmf-api/serviceCatalogManagement/v4",
        "key": "ServiceCatalogAPI"
      },
      {
        "type": "any",
        "value": "eff330b1-2ae8-4b22-b554-aa94afb8acbe",
        "key": "id"
      },
      {
        "type": "any",
        "value": "0",
        "key": "offset"
      },
      {
        "type": "any",
        "value": "5",
        "key": "limit"
      },
      {
        "type": "any",
        "value": "http://127.0.0.1:8080",
        "key": "localhost"
      },
      {
        "type": "any",
        "value": "0",
        "key": "delay"
      }
    ]
  },
  "globals": {
    "id": "bfe525e8-5f75-4fd9-be21-4ccc24269193",
    "values": [
      {
        "type": "any",
        "value": null,
        "key": "SUPPORTINGSERVICESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "FEATURESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "SERVICERELATIONSHIPSE01"
      },
      {
        "type": "any",
        "value": "active",
        "key": "STATESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "RELATEDENTITYSE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "STARTMODESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "STARTDATESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "ISBUNDLESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "SERVICEORDERITEMSE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "PLACESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "SERVICECHARACTERISTICSE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "NOTESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "SERVICETYPESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "SUPPORTINGRESOURCESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "HASSTARTEDSE01"
      },
      {
        "type": "any",
        "value": {
          "id": "1212",
          "@referredType": "ServiceSpecification"
        },
        "key": "SERVICESPECIFICATIONSE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "NAMESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "DESCRIPTIONSE01"
      },
      {
        "type": "any",
        "value": "2022-07-01T15:45:24Z",
        "key": "SERVICEDATESE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "ENDDATESE01"
      },
      {
        "type": "any",
        "value": "http://localhost:8080/service/fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
        "key": "HREFSE01"
      },
      {
        "type": "any",
        "value": "fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
        "key": "IDSE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "RELATEDPARTYSE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "ISSERVICEENABLEDSE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "ISSTATEFULSE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "CATEGORYSE01"
      },
      {
        "type": "any",
        "value": null,
        "key": "SUPPORTINGSERVICESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "FEATURESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "SERVICERELATIONSHIPSE02"
      },
      {
        "type": "any",
        "value": "active",
        "key": "STATESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "RELATEDENTITYSE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "STARTMODESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "STARTDATESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "ISBUNDLESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "SERVICEORDERITEMSE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "PLACESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "SERVICECHARACTERISTICSE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "NOTESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "SERVICETYPESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "SUPPORTINGRESOURCESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "HASSTARTEDSE02"
      },
      {
        "type": "any",
        "value": {
          "id": "1212",
          "@referredType": "ServiceSpecification"
        },
        "key": "SERVICESPECIFICATIONSE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "NAMESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "DESCRIPTIONSE02"
      },
      {
        "type": "any",
        "value": "2022-07-01T15:45:24Z",
        "key": "SERVICEDATESE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "ENDDATESE02"
      },
      {
        "type": "any",
        "value": "http://localhost:8080/service/e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
        "key": "HREFSE02"
      },
      {
        "type": "any",
        "value": "e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
        "key": "IDSE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "RELATEDPARTYSE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "ISSERVICEENABLEDSE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "ISSTATEFULSE02"
      },
      {
        "type": "any",
        "value": null,
        "key": "CATEGORYSE02"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 405,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 33.388888888888886,
      "responseMin": 6,
      "responseMax": 414,
      "responseSd": 92.5431664377278,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1656683123908,
      "completed": 1656683125021
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 18,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1f9aecc5-797d-444a-87a7-988b3e751cc0",
          "httpRequestId": "03c8cb5d-8b2d-4a8b-9d18-d91aec61fef3"
        },
        "item": {
          "id": "b2d14012-1960-4490-a877-72a030724014",
          "name": "/Service",
          "request": {
            "description": {
              "content": "This operation creates a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"state\":\"active\",\"serviceSpecification\":{\"id\":\"1212\",\"@referredType\":\"ServiceSpecification\"}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c01ec730-3f29-4d7a-a7d2-444c6f200c8e",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('SUPPORTINGSERVICESE01', instance['supportingService']);",
                  "pm.globals.set('FEATURESE01', instance['feature']);",
                  "pm.globals.set('SERVICERELATIONSHIPSE01', instance['serviceRelationship']);",
                  "pm.globals.set('STATESE01', instance['state']);",
                  "pm.globals.set('RELATEDENTITYSE01', instance['relatedEntity']);",
                  "pm.globals.set('STARTMODESE01', instance['startMode']);",
                  "pm.globals.set('STARTDATESE01', instance['startDate']);",
                  "pm.globals.set('ISBUNDLESE01', instance['isBundle']);",
                  "pm.globals.set('SERVICEORDERITEMSE01', instance['serviceOrderItem']);",
                  "pm.globals.set('PLACESE01', instance['place']);",
                  "pm.globals.set('SERVICECHARACTERISTICSE01', instance['serviceCharacteristic']);",
                  "pm.globals.set('NOTESE01', instance['note']);",
                  "pm.globals.set('SERVICETYPESE01', instance['serviceType']);",
                  "pm.globals.set('SUPPORTINGRESOURCESE01', instance['supportingResource']);",
                  "pm.globals.set('HASSTARTEDSE01', instance['hasStarted']);",
                  "pm.globals.set('SERVICESPECIFICATIONSE01', instance['serviceSpecification']);",
                  "pm.globals.set('NAMESE01', instance['name']);",
                  "pm.globals.set('DESCRIPTIONSE01', instance['description']);",
                  "pm.globals.set('SERVICEDATESE01', instance['serviceDate']);",
                  "pm.globals.set('ENDDATESE01', instance['endDate']);",
                  "pm.globals.set('HREFSE01', instance['href']);",
                  "pm.globals.set('IDSE01', instance['id']);",
                  "pm.globals.set('RELATEDPARTYSE01', instance['relatedParty']);",
                  "pm.globals.set('ISSERVICEENABLEDSE01', instance['isServiceEnabled']);",
                  "pm.globals.set('ISSTATEFULSE01', instance['isStateful']);",
                  "pm.globals.set('CATEGORYSE01', instance['category']);",
                  "",
                  "pm.test('Body includes value held on state', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['state']);",
                  "});",
                  "",
                  "pm.test('Body includes value held on serviceDate', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "4c1e4798-7e62-40f7-991c-83fac2df82e4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation creates a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1c1e9903-b325-4c54-bafa-980cd8965b35",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 94,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"state\":\"active\",\"serviceSpecification\":{\"id\":\"1212\",\"@referredType\":\"ServiceSpecification\"}}"
          }
        },
        "response": {
          "id": "72ef9668-7dd8-4b87-97f2-f516eb13a368",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "251"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 414,
          "responseSize": 251
        },
        "id": "b2d14012-1960-4490-a877-72a030724014",
        "assertions": [
          {
            "assertion": "Successful POST request",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bb8c40be-38ce-4ce3-b2d2-5b603bffdab2",
          "length": 18,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8247ab86-9c2d-46b7-b8e0-642efe2dca71"
        },
        "item": {
          "id": "b582a509-b9e2-4636-b301-de4649e580fc",
          "name": "/Service",
          "request": {
            "description": {
              "content": "This operation creates another Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"state\": \"active\",\n  \"serviceSpecification\": {\n    \"id\": \"1212\",\n    \"@referredType\": \"ServiceSpecification\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9b90099-84cb-43ec-9813-161c642d8656",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) {",
                  "",
                  "  pm.test('Array not expected as response', function () { pm.expect.fail() });",
                  "",
                  "",
                  "}",
                  "",
                  "pm.test(\"Successful POST request\", function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
                  "});",
                  "",
                  "if (pm.response.code == 202) {",
                  "  setTimeout(function () { }, [pm.variables.get(\"delay\")]);",
                  "  postman.setNextRequest('get202')",
                  "}",
                  "else {",
                  "  var instance = pm.response.json();",
                  "  var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "",
                  "  pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "  pm.test('Response has serviceDate attribute', function () { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "  pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "  pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "",
                  "  pm.globals.set('SUPPORTINGSERVICESE02', instance['supportingService']);",
                  "  pm.globals.set('FEATURESE02', instance['feature']);",
                  "  pm.globals.set('SERVICERELATIONSHIPSE02', instance['serviceRelationship']);",
                  "  pm.globals.set('STATESE02', instance['state']);",
                  "  pm.globals.set('RELATEDENTITYSE02', instance['relatedEntity']);",
                  "  pm.globals.set('STARTMODESE02', instance['startMode']);",
                  "  pm.globals.set('STARTDATESE02', instance['startDate']);",
                  "  pm.globals.set('ISBUNDLESE02', instance['isBundle']);",
                  "  pm.globals.set('SERVICEORDERITEMSE02', instance['serviceOrderItem']);",
                  "  pm.globals.set('PLACESE02', instance['place']);",
                  "  pm.globals.set('SERVICECHARACTERISTICSE02', instance['serviceCharacteristic']);",
                  "  pm.globals.set('NOTESE02', instance['note']);",
                  "  pm.globals.set('SERVICETYPESE02', instance['serviceType']);",
                  "  pm.globals.set('SUPPORTINGRESOURCESE02', instance['supportingResource']);",
                  "  pm.globals.set('HASSTARTEDSE02', instance['hasStarted']);",
                  "  pm.globals.set('SERVICESPECIFICATIONSE02', instance['serviceSpecification']);",
                  "  pm.globals.set('NAMESE02', instance['name']);",
                  "  pm.globals.set('DESCRIPTIONSE02', instance['description']);",
                  "  pm.globals.set('SERVICEDATESE02', instance['serviceDate']);",
                  "  pm.globals.set('ENDDATESE02', instance['endDate']);",
                  "  pm.globals.set('HREFSE02', instance['href']);",
                  "  pm.globals.set('IDSE02', instance['id']);",
                  "  pm.globals.set('RELATEDPARTYSE02', instance['relatedParty']);",
                  "  pm.globals.set('ISSERVICEENABLEDSE02', instance['isServiceEnabled']);",
                  "  pm.globals.set('ISSTATEFULSE02', instance['isStateful']);",
                  "  pm.globals.set('CATEGORYSE02', instance['category']);",
                  "",
                  "  pm.test('Body includes value held on state', function () {",
                  "    pm.expect(pm.response.text()).to.include(instance['state']);",
                  "  });",
                  "  pm.test('Body includes value held on serviceDate', function () {",
                  "    pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "  });",
                  "  pm.test('Body includes value held on href', function () {",
                  "    pm.expect(pm.response.text()).to.include(instance['href']);",
                  "  });",
                  "  pm.test('Body includes value held on id', function () {",
                  "    pm.expect(pm.response.text()).to.include(instance['id']);",
                  "  });",
                  "}"
                ],
                "_lastExecutionId": "72d245fd-5d2b-469f-af39-ba215e086be7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation creates another Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ce40e911-f7e3-4968-87e0-5df6e9184a86",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 118,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"state\": \"active\",\n  \"serviceSpecification\": {\n    \"id\": \"1212\",\n    \"@referredType\": \"ServiceSpecification\"\n  }\n}"
          }
        },
        "response": {
          "id": "0760766c-b368-478e-a6eb-bc80228a4a02",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "251"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 251
        },
        "id": "b582a509-b9e2-4636-b301-de4649e580fc",
        "assertions": [
          {
            "assertion": "Successful POST request",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "40f58967-b285-4248-a4df-9a99e5cfb26b",
          "length": 18,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "84a6e6ef-0af1-46d9-ac18-be0dbe8822ed"
        },
        "item": {
          "id": "302dfa15-da9d-4cd9-a0eb-7aeda29748bf",
          "name": "/Service/{{IDSE01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created Service",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDSE01}}"
              ],
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "374acb5c-b216-471f-b3b2-65f21a7dd3aa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('IDSE02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('IDSE02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "073984bc-da42-4095-9a2e-4211fa69153f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service",
              "fb90546c-ed31-467d-a26b-bfdd86e4cfe0"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "42d33dd1-b1a0-463c-8759-893008d53994",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4d436031-a481-4b8c-81b4-83682f9a2946",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "251"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 251
        },
        "id": "302dfa15-da9d-4cd9-a0eb-7aeda29748bf",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "supportingService is null",
            "skipped": false
          },
          {
            "assertion": "feature is null",
            "skipped": false
          },
          {
            "assertion": "serviceRelationship is null",
            "skipped": false
          },
          {
            "assertion": "state is active",
            "skipped": false
          },
          {
            "assertion": "relatedEntity is null",
            "skipped": false
          },
          {
            "assertion": "startMode is null",
            "skipped": false
          },
          {
            "assertion": "startDate is null",
            "skipped": false
          },
          {
            "assertion": "isBundle is null",
            "skipped": false
          },
          {
            "assertion": "serviceOrderItem is null",
            "skipped": false
          },
          {
            "assertion": "place is null",
            "skipped": false
          },
          {
            "assertion": "serviceCharacteristic is null",
            "skipped": false
          },
          {
            "assertion": "note is null",
            "skipped": false
          },
          {
            "assertion": "serviceType is null",
            "skipped": false
          },
          {
            "assertion": "supportingResource is null",
            "skipped": false
          },
          {
            "assertion": "hasStarted is null",
            "skipped": false
          },
          {
            "assertion": "serviceSpecification is [object Object]",
            "skipped": false
          },
          {
            "assertion": "name is null",
            "skipped": false
          },
          {
            "assertion": "description is null",
            "skipped": false
          },
          {
            "assertion": "serviceDate is 2022-07-01T15:45:24Z",
            "skipped": false
          },
          {
            "assertion": "endDate is null",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8080/service/fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
            "skipped": false
          },
          {
            "assertion": "id is fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
            "skipped": false
          },
          {
            "assertion": "relatedParty is null",
            "skipped": false
          },
          {
            "assertion": "isServiceEnabled is null",
            "skipped": false
          },
          {
            "assertion": "isStateful is null",
            "skipped": false
          },
          {
            "assertion": "category is null",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "39a6f9d9-980f-4027-a3d7-deb63eb601ac",
          "length": 18,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a585aa94-0408-4803-b61b-99f3856df92e"
        },
        "item": {
          "id": "c7d28bb1-e54e-4e51-8eef-fcf7a5e871d5",
          "name": "/Service/{{IDSE02}}",
          "request": {
            "description": {
              "content": "This operation search for the other one of the created Service",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDSE02}}"
              ],
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "508ae278-b2ba-481b-a1dc-e9ad66c6226f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('IDSE01 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('IDSE01 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "f8064f88-8b33-49e1-a2ea-90ff970de87c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for the other one of the created Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service",
              "e38c9a49-0ec8-4645-9ecd-aa01b44ac290"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "115a01ee-f834-4d50-8c85-3795169aeb85",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "eae5defa-d427-4b5e-ba13-8ebc3ad398b4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "251"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 251
        },
        "id": "c7d28bb1-e54e-4e51-8eef-fcf7a5e871d5",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "supportingService is null",
            "skipped": false
          },
          {
            "assertion": "feature is null",
            "skipped": false
          },
          {
            "assertion": "serviceRelationship is null",
            "skipped": false
          },
          {
            "assertion": "state is active",
            "skipped": false
          },
          {
            "assertion": "relatedEntity is null",
            "skipped": false
          },
          {
            "assertion": "startMode is null",
            "skipped": false
          },
          {
            "assertion": "startDate is null",
            "skipped": false
          },
          {
            "assertion": "isBundle is null",
            "skipped": false
          },
          {
            "assertion": "serviceOrderItem is null",
            "skipped": false
          },
          {
            "assertion": "place is null",
            "skipped": false
          },
          {
            "assertion": "serviceCharacteristic is null",
            "skipped": false
          },
          {
            "assertion": "note is null",
            "skipped": false
          },
          {
            "assertion": "serviceType is null",
            "skipped": false
          },
          {
            "assertion": "supportingResource is null",
            "skipped": false
          },
          {
            "assertion": "hasStarted is null",
            "skipped": false
          },
          {
            "assertion": "serviceSpecification is [object Object]",
            "skipped": false
          },
          {
            "assertion": "name is null",
            "skipped": false
          },
          {
            "assertion": "description is null",
            "skipped": false
          },
          {
            "assertion": "serviceDate is 2022-07-01T15:45:24Z",
            "skipped": false
          },
          {
            "assertion": "endDate is null",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8080/service/e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
            "skipped": false
          },
          {
            "assertion": "id is e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
            "skipped": false
          },
          {
            "assertion": "relatedParty is null",
            "skipped": false
          },
          {
            "assertion": "isServiceEnabled is null",
            "skipped": false
          },
          {
            "assertion": "isStateful is null",
            "skipped": false
          },
          {
            "assertion": "category is null",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b854713e-4d6a-4372-bfba-405a38104f85",
          "length": 18,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a1999119-3880-48fb-ad9e-294038346aaa"
        },
        "item": {
          "id": "5ec6844e-5bbb-4903-83a5-b2ffcd5592ea",
          "name": "/Service?fields=state",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "state"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6c8581df-d2fe-48b3-9d21-db7baf6bcc2d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "b2b72ada-6522-43e2-918c-bd712db796e2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "state"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f273e809-3051-4172-841f-8135f126d594",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cd2ec375-3da4-446b-95be-8bc25bd06102",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 27,
          "responseSize": 983
        },
        "id": "5ec6844e-5bbb-4903-83a5-b2ffcd5592ea"
      },
      {
        "cursor": {
          "ref": "e1a3916b-3dde-44c9-8f62-df188493469e",
          "length": 18,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bc8f96f6-7d82-45cd-b57c-a0512dc2b902"
        },
        "item": {
          "id": "b4327ecf-7d6e-4758-9bae-e4d46c6a09f6",
          "name": "/Service?state={{STATESE01}}",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "state",
                  "value": "{{STATESE01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "442e894f-cd7a-4e82-8150-ede594d81eb0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('IDSE02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('IDSE02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "2998922d-9797-445c-90d8-546aa697793c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "state",
                "value": "active"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a5d157e6-d349-4883-9e32-63c1b6acdc40",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0aeffaa4-7c9a-461c-856e-36fcb841858c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 1495
        },
        "id": "b4327ecf-7d6e-4758-9bae-e4d46c6a09f6",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "supportingService is null",
            "skipped": false
          },
          {
            "assertion": "feature is null",
            "skipped": false
          },
          {
            "assertion": "serviceRelationship is null",
            "skipped": false
          },
          {
            "assertion": "state is active",
            "skipped": false
          },
          {
            "assertion": "relatedEntity is null",
            "skipped": false
          },
          {
            "assertion": "startMode is null",
            "skipped": false
          },
          {
            "assertion": "startDate is null",
            "skipped": false
          },
          {
            "assertion": "isBundle is null",
            "skipped": false
          },
          {
            "assertion": "serviceOrderItem is null",
            "skipped": false
          },
          {
            "assertion": "place is null",
            "skipped": false
          },
          {
            "assertion": "serviceCharacteristic is null",
            "skipped": false
          },
          {
            "assertion": "note is null",
            "skipped": false
          },
          {
            "assertion": "serviceType is null",
            "skipped": false
          },
          {
            "assertion": "supportingResource is null",
            "skipped": false
          },
          {
            "assertion": "hasStarted is null",
            "skipped": false
          },
          {
            "assertion": "serviceSpecification is [object Object]",
            "skipped": false
          },
          {
            "assertion": "name is null",
            "skipped": false
          },
          {
            "assertion": "description is null",
            "skipped": false
          },
          {
            "assertion": "serviceDate is 2022-07-01T15:45:24Z",
            "skipped": false
          },
          {
            "assertion": "endDate is null",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8080/service/fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
            "skipped": false
          },
          {
            "assertion": "id is fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
            "skipped": false
          },
          {
            "assertion": "relatedParty is null",
            "skipped": false
          },
          {
            "assertion": "isServiceEnabled is null",
            "skipped": false
          },
          {
            "assertion": "isStateful is null",
            "skipped": false
          },
          {
            "assertion": "category is null",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "IDSE02 not expected on this test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "99484f47-686f-46a7-9ba5-5a5514221b81",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4b608ada-5d4b-475a-b392-b70de1c7bf1b"
        },
        "item": {
          "id": "10b59b93-2581-4971-ab5f-a7ca1a7aa790",
          "name": "/Service?state={{STATESE02}}",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "state",
                  "value": "{{STATESE02}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b18ebaf0-41d4-4747-8c99-53118a955a38",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('IDSE01 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('IDSE01 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "b5581ce4-defe-461c-b2f3-ca2c970e9c8b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "state",
                "value": "active"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "46a9d972-3fdb-4364-9b93-8fb9fabd92c3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7120ccff-b596-4dd3-b8d9-f29bf14c7750",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 1495
        },
        "id": "10b59b93-2581-4971-ab5f-a7ca1a7aa790",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "IDSE01 not expected on this test",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "supportingService is null",
            "skipped": false
          },
          {
            "assertion": "feature is null",
            "skipped": false
          },
          {
            "assertion": "serviceRelationship is null",
            "skipped": false
          },
          {
            "assertion": "state is active",
            "skipped": false
          },
          {
            "assertion": "relatedEntity is null",
            "skipped": false
          },
          {
            "assertion": "startMode is null",
            "skipped": false
          },
          {
            "assertion": "startDate is null",
            "skipped": false
          },
          {
            "assertion": "isBundle is null",
            "skipped": false
          },
          {
            "assertion": "serviceOrderItem is null",
            "skipped": false
          },
          {
            "assertion": "place is null",
            "skipped": false
          },
          {
            "assertion": "serviceCharacteristic is null",
            "skipped": false
          },
          {
            "assertion": "note is null",
            "skipped": false
          },
          {
            "assertion": "serviceType is null",
            "skipped": false
          },
          {
            "assertion": "supportingResource is null",
            "skipped": false
          },
          {
            "assertion": "hasStarted is null",
            "skipped": false
          },
          {
            "assertion": "serviceSpecification is [object Object]",
            "skipped": false
          },
          {
            "assertion": "name is null",
            "skipped": false
          },
          {
            "assertion": "description is null",
            "skipped": false
          },
          {
            "assertion": "serviceDate is 2022-07-01T15:45:24Z",
            "skipped": false
          },
          {
            "assertion": "endDate is null",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8080/service/e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
            "skipped": false
          },
          {
            "assertion": "id is e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
            "skipped": false
          },
          {
            "assertion": "relatedParty is null",
            "skipped": false
          },
          {
            "assertion": "isServiceEnabled is null",
            "skipped": false
          },
          {
            "assertion": "isStateful is null",
            "skipped": false
          },
          {
            "assertion": "category is null",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b1234c1c-d933-4ce7-9f38-de222a1d1344",
          "length": 18,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7084d0d4-85bd-434f-bfdb-6b85d34dd4f5"
        },
        "item": {
          "id": "610e02cc-d163-4b7e-8a75-6e4ce3c9920d",
          "name": "/Service?fields=serviceSpecification",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "serviceSpecification"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "86b4e82d-c1f8-484f-8d39-3c70b56e4634",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "0b37eadf-86cc-4298-9a94-abc4bc924403"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "serviceSpecification"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e4fad20b-0d32-4e41-b287-a7b55aa9fe44",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d5c01f01-fde8-4f29-b5cb-6e26310b3545",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 1255
        },
        "id": "610e02cc-d163-4b7e-8a75-6e4ce3c9920d"
      },
      {
        "cursor": {
          "ref": "20581a19-cbd5-4ea0-a328-07896f1da3ba",
          "length": 18,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0b2689eb-b234-402f-bcec-26da1a4b18ff"
        },
        "item": {
          "id": "b519d919-84ba-458d-9680-fec3a8b6c467",
          "name": "/Service?fields=serviceDate",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "serviceDate"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50e64586-e819-41e2-a5ee-eaded948ddf3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "34972e9d-87c9-480e-a65f-37d4e452b6d5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "serviceDate"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bbdd4856-4c38-454b-b18c-5c857a3dea38",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "878b0194-7085-4493-9255-c41108eda81e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 1011
        },
        "id": "b519d919-84ba-458d-9680-fec3a8b6c467"
      },
      {
        "cursor": {
          "ref": "e9b168bd-5ac4-4dc6-a0a3-ee68da464242",
          "length": 18,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6a17550e-5bb0-44a8-bddb-90a995cdc834"
        },
        "item": {
          "id": "2a7c45ca-204c-4a2f-8191-c08bdffa09b6",
          "name": "/Service?serviceDate={{SERVICEDATESE01}}",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "serviceDate",
                  "value": "\"{{SERVICEDATESE01}}\""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d288c9d-b208-470d-a4fa-a1ce0d14dd12",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('IDSE02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('IDSE02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "e822858e-311f-4774-a84f-cf3658a4a7cc"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "serviceDate",
                "value": "\"2022-07-01T15:45:24Z\""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8c814aaf-aa5e-4090-9b3c-281ea1269faa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "30c6e3de-8a05-44ab-a240-8283ea449a92",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 1495
        },
        "id": "2a7c45ca-204c-4a2f-8191-c08bdffa09b6",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "supportingService is null",
            "skipped": false
          },
          {
            "assertion": "feature is null",
            "skipped": false
          },
          {
            "assertion": "serviceRelationship is null",
            "skipped": false
          },
          {
            "assertion": "state is active",
            "skipped": false
          },
          {
            "assertion": "relatedEntity is null",
            "skipped": false
          },
          {
            "assertion": "startMode is null",
            "skipped": false
          },
          {
            "assertion": "startDate is null",
            "skipped": false
          },
          {
            "assertion": "isBundle is null",
            "skipped": false
          },
          {
            "assertion": "serviceOrderItem is null",
            "skipped": false
          },
          {
            "assertion": "place is null",
            "skipped": false
          },
          {
            "assertion": "serviceCharacteristic is null",
            "skipped": false
          },
          {
            "assertion": "note is null",
            "skipped": false
          },
          {
            "assertion": "serviceType is null",
            "skipped": false
          },
          {
            "assertion": "supportingResource is null",
            "skipped": false
          },
          {
            "assertion": "hasStarted is null",
            "skipped": false
          },
          {
            "assertion": "serviceSpecification is [object Object]",
            "skipped": false
          },
          {
            "assertion": "name is null",
            "skipped": false
          },
          {
            "assertion": "description is null",
            "skipped": false
          },
          {
            "assertion": "serviceDate is 2022-07-01T15:45:24Z",
            "skipped": false
          },
          {
            "assertion": "endDate is null",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8080/service/fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
            "skipped": false
          },
          {
            "assertion": "id is fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
            "skipped": false
          },
          {
            "assertion": "relatedParty is null",
            "skipped": false
          },
          {
            "assertion": "isServiceEnabled is null",
            "skipped": false
          },
          {
            "assertion": "isStateful is null",
            "skipped": false
          },
          {
            "assertion": "category is null",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "IDSE02 not expected on this test",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6e45f22a-75a6-4e0c-ae32-1a3e783f594c",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "eac9d5cc-df02-4f4d-9f95-19100ef85a75"
        },
        "item": {
          "id": "2f23d750-b905-4bed-ae15-ee938a228203",
          "name": "/Service?serviceDate={{SERVICEDATESE02}}",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "serviceDate",
                  "value": "\"{{SERVICEDATESE02}}\""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "185341eb-5022-4fe5-8f49-7fe05ed68abb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('IDSE01 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceSpecification', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceSpecification']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('IDSE01 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "9f908d46-7255-4b06-9b2d-941b15e295b6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "serviceDate",
                "value": "\"2022-07-01T15:45:24Z\""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "234b3c7e-febb-46bc-ac87-05f9c2abba12",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "74348322-ea65-449d-a437-6809c80178cf",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 1495
        },
        "id": "2f23d750-b905-4bed-ae15-ee938a228203",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "IDSE01 not expected on this test",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "supportingService is null",
            "skipped": false
          },
          {
            "assertion": "feature is null",
            "skipped": false
          },
          {
            "assertion": "serviceRelationship is null",
            "skipped": false
          },
          {
            "assertion": "state is active",
            "skipped": false
          },
          {
            "assertion": "relatedEntity is null",
            "skipped": false
          },
          {
            "assertion": "startMode is null",
            "skipped": false
          },
          {
            "assertion": "startDate is null",
            "skipped": false
          },
          {
            "assertion": "isBundle is null",
            "skipped": false
          },
          {
            "assertion": "serviceOrderItem is null",
            "skipped": false
          },
          {
            "assertion": "place is null",
            "skipped": false
          },
          {
            "assertion": "serviceCharacteristic is null",
            "skipped": false
          },
          {
            "assertion": "note is null",
            "skipped": false
          },
          {
            "assertion": "serviceType is null",
            "skipped": false
          },
          {
            "assertion": "supportingResource is null",
            "skipped": false
          },
          {
            "assertion": "hasStarted is null",
            "skipped": false
          },
          {
            "assertion": "serviceSpecification is [object Object]",
            "skipped": false
          },
          {
            "assertion": "name is null",
            "skipped": false
          },
          {
            "assertion": "description is null",
            "skipped": false
          },
          {
            "assertion": "serviceDate is 2022-07-01T15:45:24Z",
            "skipped": false
          },
          {
            "assertion": "endDate is null",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8080/service/e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
            "skipped": false
          },
          {
            "assertion": "id is e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
            "skipped": false
          },
          {
            "assertion": "relatedParty is null",
            "skipped": false
          },
          {
            "assertion": "isServiceEnabled is null",
            "skipped": false
          },
          {
            "assertion": "isStateful is null",
            "skipped": false
          },
          {
            "assertion": "category is null",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5b32af12-0fb4-4281-960b-06609a87a88f",
          "length": 18,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a18ead49-e6d2-4eb3-a43e-803879907901"
        },
        "item": {
          "id": "9f4f8db5-9446-4b13-9165-383f37b59340",
          "name": "/Service?fields=href",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "href"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3b892e3-031d-40cc-bb94-c0665cbb6ed6",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a61b9d26-5551-423c-9419-71024fae36a5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "href"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f05f2a34-79af-4788-8b97-84dc61575d60",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "56ab7a64-e3d3-4cda-8f02-417c9d3d27a7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 1103
        },
        "id": "9f4f8db5-9446-4b13-9165-383f37b59340"
      },
      {
        "cursor": {
          "ref": "d2d5579a-36f6-4724-8f09-21f1df69eb02",
          "length": 18,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f797e369-c30c-42e7-a4e6-f446c977694d"
        },
        "item": {
          "id": "a232a52c-d1f9-4d06-b78b-cc02fc7117e3",
          "name": "/Service?href={{HREFSE01}}",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "href",
                  "value": "{{HREFSE01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "03b7edd4-4211-4d09-8a83-7282d6d22552",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('IDSE02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('IDSE02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "c2b0bb54-a2a7-41aa-88d7-13712cce47bf"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "href",
                "value": "http://localhost:8080/service/fb90546c-ed31-467d-a26b-bfdd86e4cfe0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a891d925-6d3b-430c-8c9a-2cb4783c51e5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b43c297b-aba3-434c-a697-1bf7282c1b2c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 748
        },
        "id": "a232a52c-d1f9-4d06-b78b-cc02fc7117e3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "supportingService is null",
            "skipped": false
          },
          {
            "assertion": "feature is null",
            "skipped": false
          },
          {
            "assertion": "serviceRelationship is null",
            "skipped": false
          },
          {
            "assertion": "state is active",
            "skipped": false
          },
          {
            "assertion": "relatedEntity is null",
            "skipped": false
          },
          {
            "assertion": "startMode is null",
            "skipped": false
          },
          {
            "assertion": "startDate is null",
            "skipped": false
          },
          {
            "assertion": "isBundle is null",
            "skipped": false
          },
          {
            "assertion": "serviceOrderItem is null",
            "skipped": false
          },
          {
            "assertion": "place is null",
            "skipped": false
          },
          {
            "assertion": "serviceCharacteristic is null",
            "skipped": false
          },
          {
            "assertion": "note is null",
            "skipped": false
          },
          {
            "assertion": "serviceType is null",
            "skipped": false
          },
          {
            "assertion": "supportingResource is null",
            "skipped": false
          },
          {
            "assertion": "hasStarted is null",
            "skipped": false
          },
          {
            "assertion": "serviceSpecification is [object Object]",
            "skipped": false
          },
          {
            "assertion": "name is null",
            "skipped": false
          },
          {
            "assertion": "description is null",
            "skipped": false
          },
          {
            "assertion": "serviceDate is 2022-07-01T15:45:24Z",
            "skipped": false
          },
          {
            "assertion": "endDate is null",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8080/service/fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
            "skipped": false
          },
          {
            "assertion": "id is fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
            "skipped": false
          },
          {
            "assertion": "relatedParty is null",
            "skipped": false
          },
          {
            "assertion": "isServiceEnabled is null",
            "skipped": false
          },
          {
            "assertion": "isStateful is null",
            "skipped": false
          },
          {
            "assertion": "category is null",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d5c7a9cd-5682-4fd5-9131-5c76351f5698",
          "length": 18,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2d9da6b1-2808-4ef3-8767-80fceed62ec5"
        },
        "item": {
          "id": "a07fdb4b-d908-4d2b-85de-511ca7bc6358",
          "name": "/Service?href={{HREFSE02}}",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "href",
                  "value": "{{HREFSE02}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc7ade6e-cafa-4baa-8b09-602f1ae92979",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('IDSE01 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('IDSE01 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "69b8618a-2959-4c67-b533-8dc34afc821b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "href",
                "value": "http://localhost:8080/service/e38c9a49-0ec8-4645-9ecd-aa01b44ac290"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8b6f5803-cc79-45d7-acbc-0f0c9979781e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "bbde8e82-d211-4ec3-9ac9-c5feff733b42",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 748
        },
        "id": "a07fdb4b-d908-4d2b-85de-511ca7bc6358",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "supportingService is null",
            "skipped": false
          },
          {
            "assertion": "feature is null",
            "skipped": false
          },
          {
            "assertion": "serviceRelationship is null",
            "skipped": false
          },
          {
            "assertion": "state is active",
            "skipped": false
          },
          {
            "assertion": "relatedEntity is null",
            "skipped": false
          },
          {
            "assertion": "startMode is null",
            "skipped": false
          },
          {
            "assertion": "startDate is null",
            "skipped": false
          },
          {
            "assertion": "isBundle is null",
            "skipped": false
          },
          {
            "assertion": "serviceOrderItem is null",
            "skipped": false
          },
          {
            "assertion": "place is null",
            "skipped": false
          },
          {
            "assertion": "serviceCharacteristic is null",
            "skipped": false
          },
          {
            "assertion": "note is null",
            "skipped": false
          },
          {
            "assertion": "serviceType is null",
            "skipped": false
          },
          {
            "assertion": "supportingResource is null",
            "skipped": false
          },
          {
            "assertion": "hasStarted is null",
            "skipped": false
          },
          {
            "assertion": "serviceSpecification is [object Object]",
            "skipped": false
          },
          {
            "assertion": "name is null",
            "skipped": false
          },
          {
            "assertion": "description is null",
            "skipped": false
          },
          {
            "assertion": "serviceDate is 2022-07-01T15:45:24Z",
            "skipped": false
          },
          {
            "assertion": "endDate is null",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8080/service/e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
            "skipped": false
          },
          {
            "assertion": "id is e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
            "skipped": false
          },
          {
            "assertion": "relatedParty is null",
            "skipped": false
          },
          {
            "assertion": "isServiceEnabled is null",
            "skipped": false
          },
          {
            "assertion": "isStateful is null",
            "skipped": false
          },
          {
            "assertion": "category is null",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "95fbcb64-7185-4eb2-b7fc-0c4d2206d969",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d16f3f59-21ec-4038-b8b5-ca1e4abcbbd9"
        },
        "item": {
          "id": "0f032425-0ae1-4aba-ae0d-582ee4a82ccd",
          "name": "/Service?fields=id",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "id"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca64bbfe-040b-47f9-8850-86146b297bb5",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "b99a6ab9-217c-4898-aca0-2f20264b9c35"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "id"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a560496f-6228-4edd-8fca-e4a9b002391f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6e6ca495-4c37-47a5-a1c1-a31e8ca72ce4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 1043
        },
        "id": "0f032425-0ae1-4aba-ae0d-582ee4a82ccd"
      },
      {
        "cursor": {
          "ref": "f9536700-b99a-4637-94aa-414e76853264",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1ebc59a1-232f-4fe4-aefd-ce1cf80e63dc"
        },
        "item": {
          "id": "afa0052a-777a-431a-92ba-c7776989d77e",
          "name": "/Service?id={{IDSE01}}",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDSE01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "59839aa1-11e6-4988-8396-0164eba0086a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('IDSE02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceSpecification', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceSpecification']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('IDSE02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "f9f1ad72-1752-4067-ac8e-746bd40fe222"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb90546c-ed31-467d-a26b-bfdd86e4cfe0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d65bf954-a778-49bf-8c2f-2bf7459b5d15",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c0652f80-8ecc-4aa0-a13a-b6fa2cc70a67",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              102,
              98,
              57,
              48,
              53,
              52,
              54,
              99,
              45,
              101,
              100,
              51,
              49,
              45,
              52,
              54,
              55,
              100,
              45,
              97,
              50,
              54,
              98,
              45,
              98,
              102,
              100,
              100,
              56,
              54,
              101,
              52,
              99,
              102,
              101,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 748
        },
        "id": "afa0052a-777a-431a-92ba-c7776989d77e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "supportingService is null",
            "skipped": false
          },
          {
            "assertion": "feature is null",
            "skipped": false
          },
          {
            "assertion": "serviceRelationship is null",
            "skipped": false
          },
          {
            "assertion": "state is active",
            "skipped": false
          },
          {
            "assertion": "relatedEntity is null",
            "skipped": false
          },
          {
            "assertion": "startMode is null",
            "skipped": false
          },
          {
            "assertion": "startDate is null",
            "skipped": false
          },
          {
            "assertion": "isBundle is null",
            "skipped": false
          },
          {
            "assertion": "serviceOrderItem is null",
            "skipped": false
          },
          {
            "assertion": "place is null",
            "skipped": false
          },
          {
            "assertion": "serviceCharacteristic is null",
            "skipped": false
          },
          {
            "assertion": "note is null",
            "skipped": false
          },
          {
            "assertion": "serviceType is null",
            "skipped": false
          },
          {
            "assertion": "supportingResource is null",
            "skipped": false
          },
          {
            "assertion": "hasStarted is null",
            "skipped": false
          },
          {
            "assertion": "serviceSpecification is [object Object]",
            "skipped": false
          },
          {
            "assertion": "name is null",
            "skipped": false
          },
          {
            "assertion": "description is null",
            "skipped": false
          },
          {
            "assertion": "serviceDate is 2022-07-01T15:45:24Z",
            "skipped": false
          },
          {
            "assertion": "endDate is null",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8080/service/fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
            "skipped": false
          },
          {
            "assertion": "id is fb90546c-ed31-467d-a26b-bfdd86e4cfe0",
            "skipped": false
          },
          {
            "assertion": "relatedParty is null",
            "skipped": false
          },
          {
            "assertion": "isServiceEnabled is null",
            "skipped": false
          },
          {
            "assertion": "isStateful is null",
            "skipped": false
          },
          {
            "assertion": "category is null",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8abd678a-36de-43b3-b51e-1c14f2670353",
          "length": 18,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "350ee866-40d0-4cb4-91b6-da7bdd012486"
        },
        "item": {
          "id": "91626c9f-c4ee-4523-9f1f-98d35b5d0e46",
          "name": "/Service?id={{IDSE02}}",
          "request": {
            "description": {
              "content": "This operation filter a Service",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDSE02}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f254df85-77f9-4771-837d-5aa1f7835bf0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('IDSE01 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on state', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['state']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceSpecification', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceSpecification']);",
                  "        });",
                  "        pm.test('Body includes value held on serviceDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['serviceDate']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSE02\")) {",
                  "            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});",
                  "            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});",
                  "            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});",
                  "            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});",
                  "            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});",
                  "            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});",
                  "            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});",
                  "            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});",
                  "            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});",
                  "            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});",
                  "            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});",
                  "            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});",
                  "            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});",
                  "            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});",
                  "            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});",
                  "            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});",
                  "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});",
                  "            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});",
                  "            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});",
                  "            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});",
                  "            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});",
                  "            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});",
                  "            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSE01\")) {",
                  "            pm.test('IDSE01 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "891d8d27-497a-48f8-bd76-5e11f10a5955"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": "e38c9a49-0ec8-4645-9ecd-aa01b44ac290"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4183c312-43b1-4744-bfb7-2b9a34e20bf6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c09ce656-b292-4f6f-8744-65361aede259",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              48,
              56,
              48,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              101,
              51,
              56,
              99,
              57,
              97,
              52,
              57,
              45,
              48,
              101,
              99,
              56,
              45,
              52,
              54,
              52,
              53,
              45,
              57,
              101,
              99,
              100,
              45,
              97,
              97,
              48,
              49,
              98,
              52,
              52,
              97,
              99,
              50,
              57,
              48,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              100,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              104,
              97,
              115,
              83,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              66,
              117,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              69,
              110,
              97,
              98,
              108,
              101,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              83,
              116,
              97,
              116,
              101,
              102,
              117,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              55,
              45,
              48,
              49,
              84,
              49,
              53,
              58,
              52,
              53,
              58,
              50,
              52,
              90,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              77,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              111,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              108,
              97,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              69,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              101,
              108,
              97,
              116,
              101,
              100,
              80,
              97,
              114,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              105,
              115,
              116,
              105,
              99,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              50,
              49,
              50,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              64,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              83,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              105,
              110,
              103,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 748
        },
        "id": "91626c9f-c4ee-4523-9f1f-98d35b5d0e46",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has serviceDate attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on state",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on serviceDate",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "supportingService is null",
            "skipped": false
          },
          {
            "assertion": "feature is null",
            "skipped": false
          },
          {
            "assertion": "serviceRelationship is null",
            "skipped": false
          },
          {
            "assertion": "state is active",
            "skipped": false
          },
          {
            "assertion": "relatedEntity is null",
            "skipped": false
          },
          {
            "assertion": "startMode is null",
            "skipped": false
          },
          {
            "assertion": "startDate is null",
            "skipped": false
          },
          {
            "assertion": "isBundle is null",
            "skipped": false
          },
          {
            "assertion": "serviceOrderItem is null",
            "skipped": false
          },
          {
            "assertion": "place is null",
            "skipped": false
          },
          {
            "assertion": "serviceCharacteristic is null",
            "skipped": false
          },
          {
            "assertion": "note is null",
            "skipped": false
          },
          {
            "assertion": "serviceType is null",
            "skipped": false
          },
          {
            "assertion": "supportingResource is null",
            "skipped": false
          },
          {
            "assertion": "hasStarted is null",
            "skipped": false
          },
          {
            "assertion": "serviceSpecification is [object Object]",
            "skipped": false
          },
          {
            "assertion": "name is null",
            "skipped": false
          },
          {
            "assertion": "description is null",
            "skipped": false
          },
          {
            "assertion": "serviceDate is 2022-07-01T15:45:24Z",
            "skipped": false
          },
          {
            "assertion": "endDate is null",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8080/service/e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
            "skipped": false
          },
          {
            "assertion": "id is e38c9a49-0ec8-4645-9ecd-aa01b44ac290",
            "skipped": false
          },
          {
            "assertion": "relatedParty is null",
            "skipped": false
          },
          {
            "assertion": "isServiceEnabled is null",
            "skipped": false
          },
          {
            "assertion": "isStateful is null",
            "skipped": false
          },
          {
            "assertion": "category is null",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4d912527-9614-4301-be14-531da9f575d3",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f27f6868-40f8-40d5-abdb-6cfa9ea3bb67"
        },
        "item": {
          "id": "e6c830f0-829f-40e2-bf48-a307c499e596",
          "name": "/Service/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created Service",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "141cf386-5831-41a9-84a0-648020b34b03"
              ],
              "host": [
                "{{Service_Inventory}}service"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer 1321321"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5ac44b22-8da1-4821-9d54-6913eb142427",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "da052510-8444-43d0-8c7b-f34a49a30edb"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created Service",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "service",
              "141cf386-5831-41a9-84a0-648020b34b03"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer 1321321"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "13702049-fa1a-4ce8-b36a-7035bf0d8351",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c22fc09c-5d4e-4dc6-9efc-12b23e23b4b7",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 01 Jul 2022 13:45:24 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              102,
              105,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              32,
              105,
              110,
              32,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 47
        },
        "id": "e6c830f0-829f-40e2-bf48-a307c499e596",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 15418
    },
    "failures": [],
    "error": null
  }
}